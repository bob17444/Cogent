

// Cogent Language Grammar â€“ AI-Native, Semantic-First, Goal-Oriented

start: module*

module: annotation* "module" IDENTIFIER "{" import_decl* type_decl* enum_decl* module_body "}"

type_decl: "type" IDENTIFIER "=" type_expr
enum_decl: "enum" IDENTIFIER "{" enum_item ("," enum_item)* "}"
enum_item: IDENTIFIER

type_expr: IDENTIFIER type_expr_param?
type_expr_param: "<" type_expr ">"

import_decl: "import" IDENTIFIER      -> import_decl

module_body: goal_decl inputs_decl context_decl? process_decl feedback_decl?

goal_decl: "goal:" STRING
inputs_decl: "inputs:" input_list
input_list: "[" [input_item ("," input_item)*] "]"
input_item: annotation* IDENTIFIER ":" type_name

context_decl: "context:" STRING

process_decl: "process:" process_list
process_list: "[" [process_step ("," process_step)*] "]"

// Loops and Iteration (merged into process_step)
process_step: annotation* STRING
		| annotation* "for" IDENTIFIER "in" IDENTIFIER ":" process_list
		| annotation* "while" STRING ":" process_list
		| annotation* "try" process_list ("catch" IDENTIFIER process_list)?
annotation: "@" IDENTIFIER ("(" annotation_args ")")?
annotation_args: annotation_arg ("," annotation_arg)*
annotation_arg: IDENTIFIER | STRING

feedback_decl: "feedback:" STRING

type_name: IDENTIFIER ("<" type_name ">")?

IDENTIFIER: /[A-Za-z_][A-Za-z0-9_]*/
STRING: /"([^"\n])*"/

%import common.WS
%ignore WS
%import common.NEWLINE
%ignore NEWLINE

// Notes:
//   - Modules are top-level units stating goals, context, and processes.
//   - Inputs are declared with types for agent interoperability.
//   - Context and feedback blocks are optional to support self-evolving modules and traceable rationale.
//   - Processes are described in high-level semantic steps, not imperative instructions.
