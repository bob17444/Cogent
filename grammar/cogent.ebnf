(* Cogent Language Grammar â€“ AI-Native, Semantic-First, Goal-Oriented *)

CogentProgram    = { Module } ;

Module           = "module" Identifier "{" ModuleBody "}" ;

ModuleBody       = GoalDecl InputsDecl [ ContextDecl ] ProcessDecl [ FeedbackDecl ] ;

GoalDecl         = "goal:" GoalText ;
GoalText         = StringLiteral ;

InputsDecl       = "inputs:" InputList ;
InputList        = "[" { InputItem [ "," ] } "]" ;
InputItem        = Identifier ":" TypeName ;

ContextDecl      = "context:" ContextBlock ;
ContextBlock     = StringLiteral ;

ProcessDecl      = "process:" ProcessList ;
ProcessList      = "[" { ProcessStep [ "," ] } "]" ;
ProcessStep      = StringLiteral ;

FeedbackDecl     = "feedback:" FeedbackBlock ;
FeedbackBlock    = StringLiteral ;

TypeName         = Identifier [ "<" TypeName ">" ] ;

Identifier       = Letter { Letter | Digit | "_" } ;
Letter           = "A".."Z" | "a".."z" ;
Digit            = "0".."9" ;

StringLiteral    = '"' { Character } '"' ;
Character        = ? any character except " and line breaks ? ;

(* 
  Notes:
  - Modules are top-level units stating goals, context, and processes.
  - Inputs are declared with types for agent interoperability.
  - Context and feedback blocks are optional to support self-evolving modules and traceable rationale.
  - Processes are described in high-level semantic steps, not imperative instructions.
*)
